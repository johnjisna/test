pipeline {
    agent any
    options { 
        buildDiscarder(logRotator(numToKeepStr: "3")) 
        disableConcurrentBuilds()
    }

    environment {
        FILE_NAME = 'samplefile'
        LOCAL_BUILD_DIR = '.'
        IMAGE_NAME = 'sample-app-image:latest'
        DEV_DIR = "/var/lib/jenkins/workspace/dev"
        DEV_TAG = "dev"
        PROD_DIR = "/var/lib/jenkins/workspace/prod"
        PROD_TAG = "prod"
    }

    stages {
        stage('Read File from Develop') {
            when {
                branch 'develop'
            }
            environment {
                SERVER_NAME = "develop-server"
                APP_NAME = "develop-app"
                
            }
            steps {
                script {
                    echo "Running on develop branch"
                    checkout scm
                    def fileContent = readFile(env.FILE_NAME)
                    echo "File content from develop branch:\n${fileContent}"
                    echo "SERVER_NAME: ${env.SERVER_NAME}"
                    echo "APP_NAME: ${env.APP_NAME}"
                }
            }
        }

        stage('Read File from Production') {
            when {
                branch 'production'
            }
            environment {
                SERVER_NAME = "production-server"
                APP_NAME = "production-app"
                
            }
            steps {
                script {
                    echo "Running on production branch"
                    checkout scm
                    def fileContent = readFile(env.FILE_NAME)
                    echo "File content from production branch:\n${fileContent}"
                    echo "SERVER_NAME: ${env.SERVER_NAME}"
                    echo "APP_NAME: ${env.APP_NAME}"
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                echo "Building Docker image from ${env.LOCAL_BUILD_DIR}"
                script {
                    dir(env.LOCAL_BUILD_DIR) {
                        sh "docker build -t ${env.IMAGE_NAME} ."
                    }
                }
            }
        }

        stage('Push Docker Image to Dev') {
            when {
                branch 'develop'
            }
            steps {
                echo "Pushing Docker image to development repository"
                script {
                    sh "docker tag ${env.IMAGE_NAME} ${env.DEV_DIR}/${env.IMAGE_NAME}:${env.DEV_TAG}"
                    sh "docker push ${env.DEV_DIR}/${env.IMAGE_NAME}:${env.DEV_TAG}"
                }
            }
        }

        stage('Push Docker Image to Prod') {
            when {
                branch 'production'
            }
            steps {
                echo "Pushing Docker image to production repository"
                script {
                    sh "docker tag ${env.IMAGE_NAME} ${env.PROD_DIR}/${env.IMAGE_NAME}:${env.PROD_TAG}"
                    sh "docker push ${env.PROD_DIR}/${env.IMAGE_NAME}:${env.PROD_TAG}"
                }
            }
        }
    }
}
